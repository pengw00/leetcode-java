import java.util.*;
public class SubsetsII {
    //leetcode 90 subsetII backtracking
   public static List<List<Integer>> subsetsWithDup(int[] nums){
       Arrays.sort(nums);
       List<List<Integer>> res = new ArrayList<>();
       helper(res, nums, 0, new ArrayList<Integer>());
       return res;
   }
   
   private static void helper(List<List<Integer>> res, int[] nums, int pos, List<Integer> list){
       res.add(new ArrayList<Integer>(list));
       for(int i = pos; i < nums.length; i++){
           if(i != 0 && nums[i] == nums[i-1] && i != pos) continue;
           list.add(nums[i]);
           helper(res, nums, i+1, list);
           list.remove(list.size() - 1);
       }
   }
   public static void main(String args[]) {
       //testcase: 
      int[] nums = {1, 2, 2, 3, 4, 5};
      System.out.println(subsetsWithDup(nums));
      // Remove elements from the array list
   }
   //result $javac SubsetsII.java
//***Note: SubsetsII.java uses unchecked or unsafe operations.
//Note: Recompile with -Xlint:unchecked for details.
//$java -Xmx128M -Xms16M SubsetsII
//[[], [1], [1, 2], [1, 2, 2], [1, 2, 2, 3], [1, 2, 2, 3, 4], [1, 2, 2, 3, 4, 5], [1, 2, 2, 3, 5], [1, 2, 2, 4], [1, 2, 2, 4, 5], [1, 2, 2, 5], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 5], [1, 2, 4], [1, 2, 4, 5], [1, 2, 5], [1, 3], [1, 3, 4], [1, 3, 4, 5], [1, 3, 5], [1, 4], [1, 4, 5], [1, 5], [2], [2, 2], [2, 2, 3], [2, 2, 3, 4], [2, 2, 3, 4, 5], [2, 2, 3, 5], [2, 2, 4], [2, 2, 4, 5], [2, 2, 5], [2, 3], [2, 3, 4], [2, 3, 4, 5], [2, 3, 5], [2, 4], [2, 4, 5], [2, 5], [3], [3, 4], [3, 4, 5], [3, 5], [4], [4, 5], [5]]
//Initial size of al: 0
//Size of al after additions: 7
//Contents of al: [C, A2, A, E, B, D, F]
//Size of al after deletions: 5
//Contents of al: [C, A2, E, B, D]
}
